// =============================================================================
// _tool.grid
// =============================================================================
//
// This implementation is forked from boostrap v4.0.0-alpha.5.

// Generate grid columns
// =====================

@mixin make-grid-columns($columns: $grid-columns, $gutters: $grid-gutter-widths, $breakpoints: $grid-breakpoints) {
    %grid-column {
        position: relative;
        min-height: 1px;

        @if $grid-flex-enabled {
            width: 100%;
        }

        @include make-gutters($gutters);
    }

    $breakpoint-counter: 0;
    @each $breakpoint in map-keys($breakpoints) {
        $breakpoint-counter: ($breakpoint-counter + 1);

        .col-#{$breakpoint} {
            @extend %grid-column;
        }

        @for $i from 1 through $columns {
            .col-#{$breakpoint}-#{$i} {
                @extend %grid-column;
            }
        }

        @include media-breakpoint-up($breakpoint, $breakpoints) {
            @if $grid-flex-enabled {
                .col-#{$breakpoint} {
                    flex-basis: 0;
                    flex-grow: 1;
                    max-width: 100%;
                }
            }

            @for $i from 1 through $columns {
                .col-#{$breakpoint}-#{$i} {
                    @include make-col($i, $columns);
                }
            }

            @each $modifier in (pull, push) {
                @for $i from 0 through $columns {
                    .#{$modifier}-#{$breakpoint}-#{$i} {
                        @include make-col-modifier($modifier, $i, $columns);
                    }
                }
            }

            @for $i from 0 through ($columns - 1) {
                @if $breakpoint-counter != 1 or $i != 0 {
                    .offset-#{$breakpoint}-#{$i} {
                        @include make-col-modifier(offset, $i, $columns);
                    }
                }
            }
        }
    }
}

// Generate grid containers
// ========================

@mixin make-container($gutter: $grid-gutter-width-base) {
    margin-left: auto;
    margin-right: auto;
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
    @if not $grid-flex-enabled {
        @include clearfix();
    }
}

@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
    @each $breakpoint, $container-max-width in $max-widths {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            width: $container-max-width;
            max-width: 100%;
        }
    }
}

// Generate grid gutters
// =====================

@mixin make-gutters($gutters: $grid-gutter-widths) {
    @each $breakpoint in map-keys($gutters) {
        @include media-breakpoint-up($breakpoint) {
            $gutter: map-get($gutters, $breakpoint);
            padding-right: ($gutter / 2);
            padding-left: ($gutter / 2);
        }
    }
}

// Generate grid rows
// ==================

@mixin make-row($gutters: $grid-gutter-widths) {
    @if $grid-flex-enabled {
        display: flex;
        flex-wrap: wrap;
    } @else {
        @include clearfix();
    }

    @each $breakpoint in map-keys($gutters) {
        @include media-breakpoint-up($breakpoint) {
            $gutter: map-get($gutters, $breakpoint);
            margin-right: ($gutter / -2);
            margin-left: ($gutter / -2);
        }
    }
}

// Generate grid columns
// =====================

@mixin make-col-ready($gutters: $grid-gutter-widths) {
    position: relative;
    min-height: 1px;
    @if $grid-flex-enabled {
        width: 100%;
    }

    @each $breakpoint in map-keys($gutters) {
        @include media-breakpoint-up($breakpoint) {
            $gutter: map-get($gutters, $breakpoint);
            padding-right: ($gutter / 2);
            padding-left: ($gutter / 2);
        }
    }
}

@mixin make-col($size, $columns: $grid-columns) {
    @if $grid-flex-enabled {
        flex: 0 0 percentage($size / $columns);
        max-width: percentage($size / $columns);
    } @else {
        float: left;
        width: percentage($size / $columns);
    }
}

// Generate grid column offset
// ===========================

@mixin make-col-offset($size, $columns: $grid-columns) {
    margin-left: percentage($size / $columns);
}

// Generate grid column push
// =========================

@mixin make-col-push($size, $columns: $grid-columns) {
    left: if($size > 0, percentage($size / $columns), auto);
}

// Generate grid column pull
// =========================

@mixin make-col-pull($size, $columns: $grid-columns) {
    right: if($size > 0, percentage($size / $columns), auto);
}

// Generate grid column modifiers
// ==============================

@mixin make-col-modifier($type, $size, $columns) {
    @if $type == push {
        @include make-col-push($size, $columns);
    } @else if $type == pull {
        @include make-col-pull($size, $columns);
    } @else if $type == offset {
        @include make-col-offset($size, $columns);
    }
}
